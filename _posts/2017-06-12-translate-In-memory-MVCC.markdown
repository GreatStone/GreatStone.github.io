---
layout: post
title:  "翻译 《An Empirical Evaluation of In-Memory Multi-Version Concurrency Contorl》"
date:   2017/06/05 11:48:00 +0800
categories: Daily
---


工作中对于MVCC接触的已经比较多了，但是依然对MVCC的实现细节以及设计思路没有比较清晰的认知，因此在这里翻译一篇关于内存介质的MVCC的整体介绍，也作为笔记。
<br/>

*****
<br/>
<br/>
## 摘要
   MVCC（Multi-version concurrency control多版本并发控制）是现代数据库管理系统最流行的事务管理方式。尽管早在19世纪70年代就已经发明了MVCC技术，但它仍然被近十年主流的数据库系统广泛使用。MVCC通过维护多个版本的数据，一定程度上，在不影响事务的可串行性的同时提升了数据库的并发度。然而在多核的内存操作环境下，拓展MVCC并不是一件容易的事情：当有大量线程在并行运行时，线程间同步的开销可能足以抵消MVCC带来的并发优化。

   为了了解现代硬件环境下MVCC机制如何处理事务，我们从四个主要维度进行了广泛的调研：并发控制协议、版本存储、垃圾回收以及索引管理。我们用了以上技术的最先进方法实现了内存数据库，并且用OLTP的负载来进行评测。我们分析出了各种设计上的取舍导致的关键瓶颈。

## 1. 简介
   多核的出现带来了计算机架构的进化，内存数据库系统在不牺牲可串行性的前提下，实现了高效的事务管理机制。近十年，数据库系统中发展起来的最流行的技术就是MVCC。为了并行地处理同一个对象，数据库同时维护这一个逻辑对象的多个物理版本，这就是MVCC的基本思想。这个对象可以是任意粒度的，但是几乎所有的MVCC数据库都使用了元组（tuple）粒度来进行控制，因为这在多版本追踪和多并发之间取得了比较平衡的效果。多版本允许只读事务获取较为旧的数据，而不必阻止同时执行的读写事务产生同一数据的新版本。和单版本系统比较起来，事务总是在更新的时候用较新的数据覆盖原有的元组。

   有趣的是，数据库使用MVCC并不是一个最近发展起来的趋势。MVCC在1979年第一次出现在学术论文当中，1981年的InterBase DBMS第一个实现了MVCC（现已成为开源项目FireBird）。此外在许多面向磁盘的数据库当中也广泛使用了MVCC，比如Oracle（1984年），Postgres（1985年）以及MySQL的InnoDB引擎（2001年）。但是同时代的也有大量数据库使用单版本管理（如IBM DB2、Sybase），几乎所有新的支持事务的数据库都支持MVCC，而避免了这种单版本管理。不论是商业系统（例如 Microsoft Hekaton、SAP HANA、MemSQL、NuoDB）还是学术系统（例如 HYRISE、HyPer）都是如此。

   尽管新生的这些系统都采用了MVCC，但并没有一个“标准”实现。在不同的取舍以及性能表现下，有许多设计上的选择。目今为止，对现代数据库系统环境下的MVCC，还没有详尽的评测。最新的比较详尽的研究，是在1980年代，然而这项研究使用了面向磁盘存储的数据库系统，并且在单核CPU上运行模拟负载。在古老的磁盘数据库上的设计取舍，对于一个运行在多核CPU的内存数据库来说是不合适的。因此，最近的无锁的、可串行化的并发控制的趋势并不能通过以前的这些研究反映出来，内存存储以及混合的负载也是一样。

   本文中，我们研究了MVCC数据库系统中几个关键的事务管理设计：(1) 并发控制协议，(2)版本存储，(3)垃圾回收，(4)索引管理。对于每个主题，我们都描述了在内存数据库上最先进的实现以及他们分别的设计权衡。也同样突出了如何避免为更大线程数量以及更复杂负载而扩展的问题。作为研究的一部分，我们在Peloton内存数据库当中实现了所有这些方法。这使得我们可以用统一的平台来比较这些实现，而不必考虑其他架构因素带来的问题。我们在一台有40核的机器上部署了Peloton，并且使用两个OLTP测试来进行评测。我们分析了对不同实现的加压方案并且讨论了减轻他们的方案。

===待续